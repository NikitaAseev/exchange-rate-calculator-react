{"version":3,"sources":["logo.svg","components/Select.js","components/Button.js","components/Input.js","utils/getRate.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Select","props","propsCopy","curs","className","value","selected","onChange","curChange","map","item","key","Button","onClick","handleSwapClick","text","Input","type","amount","inputChange","url","getRate","val","fetch","then","res","json","data","conversion_rates","App","state","rates","cur1","cur2","amount1","amount2","setState","Object","keys","cur1Copy","this","e","id","target","console","warn","src","logo","alt","selectChange","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.381df5eb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\n\n/**\n * Currency select element.\n * \n * @param {array} props.curs - Array of currency names.\n * @param {string} props.selected - Selected currency name.\n * @param {function} props.curChange - onChange handler.\n */\nfunction Select(props) {\n    let propsCopy = { ...props };\n    if (!propsCopy.curs) propsCopy.curs = [\"GBP\"];\n\n    return (\n        <select className=\"erc-main-input erc-main-input-select\" value={props.selected} onChange={props.curChange}>\n            {\n                propsCopy.curs.map(item => (\n                    <option key={item} value={item}>{item}</option>\n                ))\n            }\n        </select>\n    );\n}\n\nexport default Select;","import React from 'react';\n\n/**\n * Generic button element.\n * \n * @param {string} props.text - Button's text\n * @param {function} props.handleSwapClick - onClick handler\n */\nfunction Button(props) {\n    return (\n        <button className=\"erc-button\" onClick={props.handleSwapClick}>{props.text}</button>\n    )\n}\n\nexport default Button;","import React from 'react';\n\n/**\n * Currency input element.\n * \n * @param {number} props.amount - New input's initial value.\n * @param {function} props.inputChange - New input's onChange handler.\n */\nfunction Input(props) {\n    return (\n        <input className=\"erc-main-input erc-main-input-text\" type=\"number\" value={props.amount} onChange={props.inputChange}></input>\n    )\n}\n\nexport default Input;","const apiKey = \"362616745a823e3c53fe4dd0\"; // This is my API key, replace it with yours in production!\nconst url = `https://prime.exchangerate-api.com/v5/${apiKey}/latest/`; \n\n/**\n * Gets Rates from server.\n * \n * @param {string} val - Currency name in UPPERCASE, ex. \"USD\".\n * @return {object} - Object with currenies as keys and rates as integer values.\n */\nfunction getRate(val) {\n    return fetch(url + val).then(res => {\n        return res.json().then(data => {\n            let rates = data && data.conversion_rates ? data.conversion_rates : { \"USD\": 1, \"EUR\": 0.912211 };\n            return rates;\n        })\n    });\n}\n\nexport default getRate;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport Select from \"./components/Select.js\"\nimport Button from \"./components/Button.js\"\nimport Input from \"./components/Input.js\"\nimport getRate from \"./utils/getRate.js\"\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      curs: [\"USD\", \"EUR\"],\n      rates: {\n        \"USD\": 1,\n        \"EUR\": 0.8849\n      },\n      cur1: \"USD\",\n      cur2: \"EUR\",\n      amount1: 1,\n      amount2: 0.8849\n    }\n\n    getRate('USD').then(res => {\n      this.setState({ curs: Object.keys(res), rates: res });\n    });\n\n  }\n\n  /**\n   * Handles swap button click. \n   * Swaps cur1 and cur2 state values, \n   * gets new rates from api and recalculates \n   * amount2 state value.\n   */\n  handleSwapClick() {\n    let cur1Copy = this.state.cur1;\n    this.setState({ cur1: this.state.cur2, cur2: cur1Copy });\n    getRate(this.state.cur2 + \"\").then(res => {\n      this.setState({ curs: Object.keys(res), rates: res });\n      this.setState({ amount2: this.state.amount1 * this.state.rates[this.state.cur2] });\n    });\n  }\n\n  /**\n   * Handles input change. \n   * Recalculates amount1 and amount2 state values, \n   * according on the changed input's new value.\n   * \n   * @param {Event} e \n   * @param {number} id - Different action is required depending on the id.\n   */\n  inputChange(e, id) {\n    if (id === 1) {\n      this.setState({ amount1: e.target.value });\n      this.setState({ amount2: e.target.value * this.state.rates[this.state.cur2] });\n    } else {\n      this.setState({ amount2: e.target.value });\n      this.setState({ amount1: e.target.value / this.state.rates[this.state.cur2] });\n    }\n  }\n\n  /**\n   * Handles select changes. \n   * Gets new rates from api.\n   * Recalculates bottom input's value.\n   * \n   * @param {event} e \n   * @param {number} id - Different action is required depending on the id.\n   */\n  selectChange(e, id) {\n    if (id === 1) {\n      this.setState({ cur1: e.target.value });\n      getRate(e.target.value + \"\").then(res => {\n        console.warn(res);\n        this.setState({ curs: Object.keys(res), rates: res });\n        this.setState({ amount2: this.state.amount1 * this.state.rates[this.state.cur2] });\n      });\n    } else {\n      this.setState({ cur2: e.target.value, amount2: this.state.amount1 * this.state.rates[e.target.value] });\n    }\n  }\n\n  render() {\n\n    return (\n      <div className=\"App\">\n        <div className=\"erc\">\n\n          <div className=\"erc-container\">\n            <div className=\"erc-header\">\n\n              <div className=\"erc-logo\">\n                <img src={logo} className=\"App-logo\" alt=\"logo\" />\n              </div>\n\n              <div className=\"erc-header-title\">\n                Exchange Rate Calculator\n          </div>\n\n            </div>\n            <div className=\"erc-main\">\n              <div className=\"erc-container\">\n\n                <div className=\"erc-main-title\">\n                  Chose the currency and the amounts to get the exchange rate\n          </div>\n\n                <div className=\"erc-main-row erc-main-row1\">\n\n                  <Select curs={this.state.curs} selected={this.state.cur1} curChange={(e) => { this.selectChange(e, 1); }} />\n                  <Input amount={this.state.amount1} inputChange={(e) => { this.inputChange(e, 1); }} />\n\n                </div>\n\n                <div className=\"erc-main-row erc-main-row2\">\n\n                  <Button text=\"Swap\" handleSwapClick={() => { this.handleSwapClick() }} />\n                  <div className=\"erc-main-row2-coefficient\">1 {this.state.cur1} = {this.state.rates[this.state.cur2]} {this.state.cur2}</div>\n\n                </div>\n\n                <div className=\"erc-main-row erc-main-row3\">\n\n                  <Select curs={this.state.curs} selected={this.state.cur2} curChange={(e) => { this.selectChange(e, 2); }} />\n                  <Input amount={this.state.amount2} inputChange={(e) => { this.inputChange(e, 2); }} />\n\n                </div>\n\n              </div>\n            </div>\n          </div>\n\n\n        </div>\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}